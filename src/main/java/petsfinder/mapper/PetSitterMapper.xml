<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="petsfinder.petsitter.PetSitterDAOImpl">

	<!-- 리스트 -->
	<!-- 리스트 전체 개수 가져오기 -->
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) from
		sitter
	</select>
	
	<!-- 미니리스트 1번째 -->
	<select id="listPage" resultType="petsfinder.petsitter.PetSitterDTO">
		select * from (
		    select a.*, rownum rNum from (
		        SELECT 
		            s.*, sitphoto_idx, sitphoto_photo
		        FROM 
		            sitter s
				FULL OUTER JOIN 
		            (select * from sitter_photo where sitphoto_idx in (select min(sitphoto_idx) from sitter_photo group by sit_idx)) sp
				ON 
		            s.sit_idx = sp.sit_idx
				order by s.sit_idx asc
		    ) a
		)
		where rNum between #{ param1 } and #{ param2 }
	</select>
	<!-- 미니리스트 2번재 -->
	<select id="listPage1" resultType="petsfinder.petsitter.PetSitterDTO">
		select * from (
		    select a.*, rownum rNum from (
		        SELECT 
		            s.*, sitphoto_idx, sitphoto_photo
		        FROM 
		            sitter s
				FULL OUTER JOIN 
		            (select * from sitter_photo where sitphoto_idx in (select min(sitphoto_idx) from sitter_photo group by sit_idx)) sp
				ON 
		            s.sit_idx = sp.sit_idx
				order by s.sit_client desc
		    ) a
		)
		where rNum between #{ param1 } and #{ param2 }
	</select>
	<!-- 미니리스트 3번째 -->
	<select id="listPage2" resultType="petsfinder.petsitter.PetSitterDTO">
	   select * from (
		    select a.*, rownum rNum from (
		        SELECT 
		            s.*, sitphoto_idx, sitphoto_photo
		        FROM 
		            sitter s
				FULL OUTER JOIN 
		            (select * from sitter_photo where sitphoto_idx in (select min(sitphoto_idx) from sitter_photo group by sit_idx)) sp
				ON 
		            s.sit_idx = sp.sit_idx
				order by s.sit_idx desc
		    ) a
		)
		where rNum between #{ param1 } and #{ param2 }
	</select>
	<!-- 상세보기 -->
	<!-- 전체 목록 조회 -->
	<select id="sitterView" resultType="petsfinder.petsitter.PetSitterDTO">
	
		select 
		    s.member_idx,
		    s.sit_idx, sit_title, sit_intro, sit_addr, s_fee, m_fee, b_fee, sit_client, sit_starpoint, sit_starcount,
		    member_name, member_email,
		    pet_idx, pet_age, pet_name, pet_gender
		from 
		    sitter s
		left outer join 
			pet p on s.member_idx = p.member_idx 
		inner join 
			member m on s.member_idx = m.member_idx
		where sit_idx = #{ sit_idx }
	</select>
	

	<!-- 사진 조회 -->
	<select id="sit_photo" resultType="petsfinder.petsitter.PetSitterDTO">
		select * from sitter_photo where sit_idx = #{ sit_idx }
	</select>

	<!-- 후기, 좋아요 조회 -->
	<select id="stReview" resultType="petsfinder.review.ReviewBoardDTO">
	
		select
		    a.*, NVL(b.countlike, 0) as countlike
		from
		    ( select 
		        r.*, m.member_name member_namer, member_photo
		    from 
		        review_board r, member m 
		    where 
		        r.member_idx = m.member_idx and sit_idx = #{ param1 }
		    order by review_idx desc ) a
		left outer join
		    ( select
		        review_idx, count(review_idx) countlike
		    from 
		        review_like
		    where
		        reviewLike_stt = 1 
		    group by review_idx ) b
		on a.review_idx = b.review_idx
	
	</select>
	
	<!-- 가능 서비스 조회 -->
	<select id="avalService" resultType="petsfinder.petsitter.PetSitterDTO">
	
		select 
			typsrv_expln , typSrv_service 
		from 
			type_service 
		where 
			typsrv_idx 
			in 
				(
					select 
						typsrv_idx from available_services 
					where 
						sit_idx = #{ sit_idx }
				)
		order by typsrv_idx asc
	</select>
	
	<!-- 시터 태그 조회 -->
	<select id="sitterTag" resultType="petsfinder.petsitter.PetSitterDTO">
		select typTag_expln from type_tag where typTag_idx in (select typTag_idx from sitter_tag where sit_idx=#{ sit_idx })
	</select>

	<!-- 후기의 댓글 저장 -->
  	<insert id="commentInsert1" parameterType="petsfinder.review.ReviewCommentDTO">
		INSERT INTO review_Comment( reviewcomm_idx,	reviewcomm_content, reviewcomm_regdate, review_idx,member_idx)
									VALUES(	SEQ_reviewcomm_idx.nextval, #{reviewcomm_content}, sysdate, #{review_idx}
										, #{member_idx})
	</insert>
	
	<select id="rc_idx" resultType="int">
		select max(reviewcomm_idx) reviewcomm_idx from review_Comment
	</select>
	
	<!-- 후기댓글뽑아오기 -->
	<select id="reviewComment1" resultType="petsfinder.review.ReviewCommentDTO">
  		select 
		    a.*, b.member_name member_namec, member_photo
		from (select * 
		    from review_Comment 
		    where review_idx 
		    in(select review_idx 
		        from review_board 
		        where sit_idx=#{param1})) a, member b 
		where a.member_idx=b.member_idx
  	</select>
	
	<!-- 후기 댓글 삭제 -->
  	<delete id="deleteCommSit">
  		delete from review_comment where REVIEWCOMM_IDX=#{param1}
  	</delete> 
	
	<!-- 좋아요 유무확인 -->
	<select id="likeStatus1" resultType="petsfinder.review.ReviewLikeDTO"
	parameterType="petsfinder.review.ReviewLikeDTO">
		select * from review_like where review_idx = #{review_idx} and member_idx = #{member_idx}
	</select>
	
	<!-- 좋아요 저장 -->
	<insert id="insertLike1" parameterType="petsfinder.review.ReviewLikeDTO">
		INSERT INTO review_like(reviewlike_idx, reviewlike_stt, review_idx, member_idx)
                           VALUES(SEQ_reviewlike_idx.nextval,1, #{review_idx}, #{member_idx})
	</insert>
	
	<!-- 좋아요 0->1 -->
	<update id="likeZeroToOne1" parameterType="petsfinder.review.ReviewLikeDTO">
		update review_like set reviewlike_stt = 1 where review_idx = #{review_idx} and member_idx = #{member_idx}
	</update>
	
	<!-- 좋아요 1->0 -->
	<update id="likeOntToZero1" parameterType="petsfinder.review.ReviewLikeDTO">
		update review_like set reviewlike_stt = 0 where review_idx = #{review_idx} and member_idx = #{member_idx}
	</update>
	
	<!-- 사용자가 좋아요한 후기 목록 -->
	<select id="likeList1" resultType="petsfinder.review.ReviewLikeDTO">
		select l.*
		from review_board b , review_like l 
		where b.review_idx=l.review_idx and l.member_idx=#{param1} and l.reviewlike_stt=1
	</select>
	
	<select id="getTotalCount_sitter" resultType="int">
  		select count(*) from review_board where review_flag='sit' and sit_idx= #{param1}
  	</select>
	
	<!-- 시터별 예약된 날짜 조회 -->
	<select id="reserved" resultType="petsfinder.petsitter.PetSitterDTO">
		select * from sit_book where sit_idx = #{ sit_idx } and sbook_status != 'can'
	</select>

	<!-- 예약 등록 -->
	<insert id="reserve" parameterType="petsfinder.petsitter.PetSitterDTO">
		insert into sit_book 
			( 
			sbook_idx, 
			sit_idx, 
			member_idx, 
			sbook_start, 
			sbook_end, 
			p_cellData, 
			totalPrice
			)
		values 
			( SEQ_sbook_idx.NEXTVAL, #{ sit_idx }, #{ member_idx }, #{ sbook_start }, 
			#{ sbook_end }, #{ p_cellData }, #{ totalPrice } )
	</insert>

	<!-- 리스트 -->
	
<!-- 리스트 더보기 & 예약 날짜 조회  & 태그 조회 -->
   <select id="petsitterList" resultType="petsfinder.petsitter.PetSitterDTO" parameterType="petsfinder.petsitter.ParameterDTO">
      SELECT * FROM (
         SELECT 
            a.*, rownum rNum
         FROM (
	             SELECT
	                 s.*, sitphoto_idx, sitphoto_photo, NVL(sit_starpoint / DECODE(sit_starcount, 0, NULL, sit_starcount), 0) star
	                 <if test="lat != null and lon != null">
	                 , (6371 * acos(cos(CAST(s.SIT_LATITUDE AS FLOAT) * ROUND(3.141592653589793,4) / 180.0) * 
	                    cos(#{lat} * ROUND(3.141592653589793,6) / 180.0) * 
	                    cos((#{lon} * ROUND(3.141592653589793,6) / 180.0) - 
	                    (CAST(s.SIT_LONGTITUDE AS FLOAT) * ROUND(3.141592653589793,6) / 180.0)) + 
	                    sin(CAST(s.SIT_LATITUDE AS FLOAT) * ROUND(3.141592653589793,6) / 180.0)* 
	                    sin(#{lat} * ROUND(3.141592653589793,6) / 180.0))) as distance
	                    </if>
	                 <if test="lat == null or lon == null">
	                 , (6371 * acos(cos(CAST(s.SIT_LATITUDE AS FLOAT) * ROUND(3.141592653589793,4) / 180.0) * 
	                    cos(37.478763 * ROUND(3.141592653589793,6) / 180.0) * 
	                    cos((126.878790 * ROUND(3.141592653589793,6) / 180.0) - 
	                    (CAST(s.SIT_LONGTITUDE AS FLOAT) * ROUND(3.141592653589793,6) / 180.0)) + 
	                    sin(CAST(s.SIT_LATITUDE AS FLOAT) * ROUND(3.141592653589793,6) / 180.0)* 
	                    sin(37.478763 * ROUND(3.141592653589793,6) / 180.0))) as distance
	                    </if>
	             FROM
	                 sitter s 
             FULL OUTER JOIN (
                SELECT 
                   * 
                FROM
                   sitter_photo 
                WHERE
                   sitphoto_idx 
                IN (
                   SELECT
                      min(sitphoto_idx) 
                   FROM
                      sitter_photo 
                   GROUP BY sit_idx
                )
             ) sp 
             ON 
                 s.sit_idx = sp.sit_idx
           <if test="(sbook_start1 != null and sbook_end1 != null) or (typtag != null and !typtag.isEmpty())">
             WHERE
                 s.sit_idx NOT IN (
                     SELECT
                         sit_idx
                     FROM
                         sit_book 
                     WHERE (
                         (sbook_start <![CDATA[<=]]> #{ sbook_start1 } AND sbook_end <![CDATA[>]]> #{ sbook_start2 }) 
                        OR 
                        (sbook_start <![CDATA[<]]> #{ sbook_end1 } AND sbook_end <![CDATA[>=]]> #{ sbook_end2 })
                        ) and sbook_status not in ('can')
                 ) 
            <if test="typtag != null and !typtag.isEmpty()">
                 AND s.sit_idx IN (
                      SELECT
                          sit_idx 
                      FROM (
                          SELECT
                              sit_idx, count(sit_idx) 
                          FROM (
                              SELECT 
                                  sit_idx 
                              FROM
                                  sitter_tag 
                            WHERE
                                typtag_idx 
                            IN 
                               <foreach collection="typtag" item="item" index="index" open="(" close=")" separator=",">
                                   #{ item }
                               </foreach>
                          ) 
                          GROUP BY
                              sit_idx 
                          HAVING
                              count(sit_idx) = #{ count }
                      )
                  )
                </if>
         </if>
         <if test="price != null and price == 1">
            ORDER BY s_fee ASC
            <if test="star != null and star == 1">
            , star DESC
               <if test="distance != null and distance == 1">
                , distance asc
               </if>
            </if>
            <if test="star == null or star != 1">
               <if test="distance != null and distance == 1">
                , distance asc
               </if>
            </if>
         </if>
         <if test="price == null or price != 1">
            <if test="star != null and star == 1">
               ORDER BY star DESC
               <if test="distance != null and distance == 1">
                , distance asc
               </if>
            </if>
            <if test="star == null or star != 1">
               <if test="distance != null and distance == 1">
                ORDER BY distance asc
               </if>
               <if test="distance == null or distance != 1">
                ORDER BY s.sit_idx desc
               </if>
            </if>
         </if>
          ) a
      )
      WHERE rNum BETWEEN #{ start } AND #{ end }
   </select>

	<!-- 예약 날짜 조회 시 & 태그 조회 시 전체 개수 -->
	<select id="searchCount" resultType="int" parameterType="petsfinder.petsitter.ParameterDTO">
		SELECT
	        count(*)
	    FROM
	        sitter s 
	    FULL OUTER JOIN (
	    	SELECT
	    		* 
	    	FROM
	    		sitter_photo 
	    	WHERE
	    		sitphoto_idx 
	    	IN (
	    		SELECT
	    			min(sitphoto_idx) 
	    		FROM
	    			sitter_photo 
	    		GROUP BY sit_idx
	    	)
	    ) sp 
	    ON 
	        s.sit_idx = sp.sit_idx
	<if test="(sbook_start1 != null and sbook_end1 != null) or (typtag != null and !typtag.isEmpty())">     
	    WHERE
	        s.sit_idx NOT IN (
	            SELECT
	                sit_idx
	            FROM
	                sit_book 
	            WHERE (
	                (sbook_start <![CDATA[<=]]> #{ sbook_start1 } AND sbook_end <![CDATA[>]]> #{ sbook_start2 }) 
		            OR 
		            (sbook_start <![CDATA[<]]> #{ sbook_end1 } AND sbook_end <![CDATA[>=]]> #{ sbook_end2 })
		            ) and sbook_status not in ('can')
            )
            <if test="typtag != null and !typtag.isEmpty()">
		        AND s.sit_idx IN (
	                SELECT
	                    sit_idx 
	                FROM (
	                    SELECT
	                        sit_idx, count(sit_idx) 
	                    FROM (
	                        SELECT 
	                            sit_idx 
	                        FROM
	                            sitter_tag 
			                WHERE
			                    typtag_idx 
			                IN 
                            <foreach collection="typtag" item="item" index="index" open="(" close=")" separator=",">
                            	#{ item }
                            </foreach>
	                    ) 
	                    GROUP BY
	                        sit_idx 
	                    HAVING
	                        count(sit_idx) = #{ count }
	                )
	            )
			</if>
		</if>
	</select>


	<!-- 시터 등록 시 기존 정보 조회 -->
	<select id="sit_view" resultType="petsfinder.petsitter.PetSitterDTO">
		select * from sitter where member_idx = #{ member_idx }
	</select>
	
	<!-- 태그 -->	
	<select id="sit_tag" resultType="String">
		select typtag_expln from type_tag where typtag_idx in (select typtag_idx from sitter_tag where sit_idx = #{ sit_idx })
	</select>
	<select id="tags" resultType="String">
		select typtag_expln from type_tag
	</select>
	<!-- 서비스 -->
	<select id="sit_service" resultType="Integer">
		select typsrv_idx from available_services where sit_idx = #{ sit_idx }
	</select>
	

	<!-- 시터 정보 수정 -->
	<!-- 태그 -->
	<delete id="d_tag">
		DELETE FROM sitter_tag WHERE sit_idx = #{ sit_idx }
	</delete>
	<insert id="u_tag">
		INSERT INTO sitter_tag VALUES (#{ param1 }, #{ param2 })
	</insert>
	
	<!-- 서비스 -->
	<delete id="d_serve">
		DELETE FROM available_services WHERE sit_idx = #{ sit_idx }
	</delete>
	<insert id="u_serve">
		INSERT INTO available_services VALUES (#{ param1 }, #{ param2 })
	</insert>
	
	<!-- 시터 정보 -->
	<update id="u_sitter" parameterType="petsfinder.petsitter.PetSitterDTO">	
		UPDATE sitter SET sit_title = #{ sit_title }, sit_intro = #{ sit_intro }, s_fee = #{ s_fee }, m_fee = #{ m_fee }, b_fee = #{ b_fee } WHERE sit_idx = #{ sit_idx }
	</update>
	
	<insert id="i_sitter" parameterType="petsfinder.petsitter.PetSitterDTO">
		INSERT INTO sitter VALUES (SEQ_sitter_idx.nextval, #{ sit_title }, #{ sit_intro }, #{ sit_addr }, #{ member_idx }, #{ s_fee }, #{ m_fee }, #{ b_fee }, 0, 0, 0, '37.478763', '126.878790')
	</insert>
	
	<!-- 시터 사진 -->
	<insert id="i_photo">
		INSERT INTO sitter_photo VALUES (SEQ_sitphoto_idx.nextval, #{ param1 }, #{ param2 })
	</insert>
	
	<delete id="d_photo">
		DELETE FROM sitter_photo WHERE sit_idx = #{ sit_idx }
	</delete>

	<select id="u_sitIdx" resultType="int">
		select sit_idx from sitter where sit_title = #{ sit_title }
	</select>
</mapper>